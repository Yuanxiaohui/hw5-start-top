// Generated by LiveScript 1.3.1
(function(){
  var Button, calculator, initialButton, robot, initialAt, bubbleClick, whenLeaving, resetAllElement;
  Button = (function(){
    Button.displayName = 'Button';
    var prototype = Button.prototype, constructor = Button;
    Button.buttons = [];
    Button.enableOthers = function(thisButton){
      var i$, ref$, len$, button;
      for (i$ = 0, len$ = (ref$ = this.buttons).length; i$ < len$; ++i$) {
        button = ref$[i$];
        if (button !== thisButton && button.state === 'disable') {
          button.enable();
        }
      }
    };
    Button.disableOthers = function(thisButton){
      var i$, ref$, len$, button;
      for (i$ = 0, len$ = (ref$ = this.buttons).length; i$ < len$; ++i$) {
        button = ref$[i$];
        if (button !== thisButton && button.state === 'enable') {
          button.disable();
        }
      }
    };
    Button.resetAll = function(){
      var i$, ref$, len$, button;
      for (i$ = 0, len$ = (ref$ = this.buttons).length; i$ < len$; ++i$) {
        button = ref$[i$];
        button.reset();
      }
    };
    Button.allDone = function(){
      var i$, ref$, len$, button;
      for (i$ = 0, len$ = (ref$ = this.buttons).length; i$ < len$; ++i$) {
        button = ref$[i$];
        if (button.state !== 'done') {
          return false;
        }
      }
      return true;
    };
    function Button(dom){
      var this$ = this;
      this.dom = dom;
      this.fetchAndShow = bind$(this, 'fetchAndShow', prototype);
      this.state = 'enable';
      this.dom.addClass('enable');
      this.dom.click(function(){
        if (this$.state === 'enable') {
          this$.constructor.disableOthers(this$);
          this$.wait();
          this$.dom.find('.unread').css('visibility', 'visible');
          this$.fetchAndShow();
          if (robot.current !== 0) {
            this$.constructor.enableOthers(this$);
            robot.clickButton();
          }
        }
      });
      this.constructor.buttons.push(this);
    }
    prototype.fetchAndShow = function(){
      var number, this$ = this;
      number = '...';
      this.showNumber(number);
      this.ajax = $.ajax(function(){
        ({
          method: 'GET',
          url: 'http://localhost:3000/'
        });
      });
      this.ajax.done(function(msg){
        var number;
        number = msg;
        this$.showNumber(number);
        this$.done();
        calculator.add(number);
        this$.constructor.enableOthers(this$);
        bubbleClick();
        if (robot.current === robot.sequence.length) {
          robot.clickButton();
        }
      });
    };
    prototype.enable = function(){
      this.state = 'enable';
      this.dom.removeClass('disable').addClass('enable');
    };
    prototype.disable = function(){
      this.state = 'disable';
      this.dom.removeClass('enable').addClass('disable');
    };
    prototype.wait = function(){
      this.state = 'wating';
      this.dom.addClass('waiting');
    };
    prototype.done = function(){
      this.state = 'done';
      this.dom.addClass('done');
    };
    prototype.showNumber = function(number){
      this.dom.find('.num').text(number);
    };
    prototype.reset = function(){
      this.state = 'enable';
      this.dom.removeClass('disable waiting done').addClass('enable');
      this.dom.find('.unread').css('visibility', 'hidden');
      this.dom.find('.num').text('');
    };
    return Button;
  }());
  calculator = {
    sum: 0,
    add: function(number){
      this.sum += parseInt(number);
    },
    reset: function(){
      this.sum = 0;
    }
  };
  $(window).load(function(){
    initialButton();
    robot.initial();
    initialAt();
    return whenLeaving();
  });
  initialButton = function(){
    var i$, ref$, len$;
    for (i$ = 0, len$ = (ref$ = $('.button')).length; i$ < len$; ++i$) {
      (fn$.call(this, ref$[i$]));
    }
    function fn$(dom){
      var button;
      button = new Button($(dom));
    }
  };
  robot = {
    initial: function(){
      this.buttons = $('.button');
      this.current = 0;
      this.sequence = ["0", "1", "2", "3", "4"];
    },
    clickButton: function(){
      if (this.current === this.sequence.length) {
        $('#info-bar').click();
      } else {
        this.getNextButton().click();
      }
    },
    getNextButton: function(){
      return this.buttons[this.current++];
    },
    reset: function(){
      this.current = 0;
    }
  };
  initialAt = function(){
    $('.apb').click(function(){
      resetAllElement();
      robot.clickButton();
    });
  };
  bubbleClick = function(){
    var bubble;
    bubble = $('#info-bar');
    if (!Button.allDone()) {
      bubble.addClass('disable');
      bubble.off('click');
    } else {
      bubble.removeClass('disable').addClass('enable');
      bubble.on('click', function(){
        bubble.text(calculator.sum);
        bubble.addClass('done');
      });
    }
  };
  whenLeaving = function(){
    var leave;
    leave = false;
    $('.apb').mouseover(function(){
      var leave;
      if (leave) {
        initialButton();
        leave = false;
      }
    });
    $('.apb').mouseout(function(){
      var leave;
      leave = true;
      resetAllElement();
    });
  };
  resetAllElement = function(){
    Button.resetAll();
    calculator.reset();
    robot.reset();
    $('#info-bar').text('');
    if ($('#info-bar').hasClass('enable')) {
      $('#info-bar').removeClass('enable');
    }
    if ($('#info-bar').hasClass('done')) {
      $('#info-bar').removeClass('done');
    }
    if (!$('#info-bar').hasClass('disable')) {
      $('#info-bar').addClass('disable');
    }
    $('#info-bar').off('click');
  };
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);
