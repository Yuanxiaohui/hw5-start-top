// Generated by LiveScript 1.3.1
(function(){
  var Button, allButtonsAbleToBeClickedToFetchNumber, buttonsInit, bubbleAbleToBeClickedToGetSum, getButtonsSum, addResettingWhenLeavingApb, reset, setBubbleAbleToBeClicked, bubbleInit, S1WaitUserClick, robot, S2RobotClickButtonsFromAToEAndThenClickBubble, S4RobotClickButtonsInARandomOrderAndThenClickBubble, S5RobotClickButtonsInARandomOrderAndThenClickBubbleWithPossibleToFail, checkBubbleAbleToBeClicked, callHandler, AHandler, BHandler, CHandler, DHandler, EHandler, bubbleHandler, setNumber, showMessage;
  $(function(){
    allButtonsAbleToBeClickedToFetchNumber(function(){
      robot.nextAimToClick();
    });
    bubbleAbleToBeClickedToGetSum();
    addResettingWhenLeavingApb();
    robot.initial();
    S1WaitUserClick();
    return S5RobotClickButtonsInARandomOrderAndThenClickBubbleWithPossibleToFail();
  });
  Button = (function(){
    Button.displayName = 'Button';
    var prototype = Button.prototype, constructor = Button;
    Button.buttons = [];
    function Button(dom, i, callback){
      var this$ = this;
      this.dom = dom;
      this.i = i;
      this.callback = callback;
      this.name = 'A' + this.i;
      this.state = 'enabled';
      this.dom.addClass('enabled');
      this.dom.click(function(){
        if (this$.dom.hasClass('enabled')) {
          this$.constructor.disableOtherButtons(this$);
          this$.wait();
          this$.buttonFetchNumberFromServerAndShow();
        }
      });
      this.constructor.buttons.push(this);
    }
    Button.disableOtherButtons = function(thisButton){
      var i$, ref$, len$, button, results$ = [];
      for (i$ = 0, len$ = (ref$ = this.buttons).length; i$ < len$; ++i$) {
        button = ref$[i$];
        if (button !== thisButton) {
          if (button.state !== 'done') {
            if (button.dom[0].children[1].innerHTML === '') {
              button.dom[0].children[1].style.visibility = 'collapse';
            }
            results$.push(button.disable());
          }
        }
      }
      return results$;
    };
    Button.enableOtherButtons = function(thisButton){
      var i$, ref$, len$, button, results$ = [];
      for (i$ = 0, len$ = (ref$ = this.buttons).length; i$ < len$; ++i$) {
        button = ref$[i$];
        if (button !== thisButton) {
          if (button.state !== 'done') {
            button.dom[0].children[1].style.visibility = '';
            results$.push(button.enable());
          }
        }
      }
      return results$;
    };
    Button.allButtonsAreDone = function(){
      var i$, ref$, len$, button;
      for (i$ = 0, len$ = (ref$ = this.buttons).length; i$ < len$; ++i$) {
        button = ref$[i$];
        if (button.state !== 'done') {
          return false;
        }
      }
      return true;
    };
    Button.resetAll = function(){
      var i$, ref$, len$, button;
      for (i$ = 0, len$ = (ref$ = this.buttons).length; i$ < len$; ++i$) {
        button = ref$[i$];
        button.reset();
      }
    };
    prototype.buttonFetchNumberFromServerAndShow = function(){
      var this$ = this;
      $.get('/', function(number, result){
        if (this$.state === 'waiting') {
          this$.done();
        }
        if (this$.constructor.allButtonsAreDone()) {
          setBubbleAbleToBeClicked();
        }
        this$.constructor.enableOtherButtons(this$);
        this$.buttonShowNumber(number);
        this$.callback();
      });
    };
    prototype.buttonShowNumber = function(number){
      this.dom.find('.unread').text(number);
    };
    prototype.disable = function(){
      this.state = 'disabled';
      this.dom.removeClass('enabled').addClass('disabled');
    };
    prototype.enable = function(){
      this.state = 'enabled';
      this.dom.removeClass('disabled').addClass('enabled');
    };
    prototype.wait = function(){
      this.state = 'waiting';
      this.dom.removeClass('enabled').addClass('waiting');
    };
    prototype.done = function(){
      this.state = 'done';
      this.dom.removeClass('waiting').addClass('done');
    };
    prototype.reset = function(){
      this.state = 'enabled';
      this.dom.removeClass('disabled waiting done').addClass('enabled');
      this.dom.find('.unread').text('');
    };
    return Button;
  }());
  allButtonsAbleToBeClickedToFetchNumber = function(next){
    buttonsInit(next);
  };
  buttonsInit = function(next){
    var buttons, i$, len$, i, bt, button;
    buttons = $('#control-ring .button');
    for (i$ = 0, len$ = buttons.length; i$ < len$; ++i$) {
      i = i$;
      bt = buttons[i$];
      button = new Button($(bt), i, fn$);
    }
    function fn$(){
      if (typeof next == 'function') {
        next();
      }
    }
  };
  bubbleAbleToBeClickedToGetSum = function(){
    var bubble, this$ = this;
    bubbleInit();
    bubble = $('#info-bar');
    bubble.click(function(currentSum){
      if (bubble.hasClass('enabled')) {
        bubbleHandler(currentSum);
        bubble.removeClass('enabled').addClass('disabled');
      }
    });
  };
  getButtonsSum = function(){
    var sum, i$, ref$, len$, button;
    sum = 0;
    for (i$ = 0, len$ = (ref$ = $('#control-ring .button')).length; i$ < len$; ++i$) {
      button = ref$[i$];
      sum += parseInt(button.children[1].innerHTML.toString());
    }
    return sum;
  };
  addResettingWhenLeavingApb = function(){
    var isEnteringOther;
    isEnteringOther = false;
    $('#info-bar, #control-ring-container, .apb').on('mouseenter', function(){
      isEnteringOther = true;
    });
    $('#info-bar, #control-ring-container').on('mouseleave', function(){
      isEnteringOther = false;
      setTimeout(function(){
        if (!isEnteringOther) {
          reset();
        }
      }, 0);
    });
  };
  reset = function(){
    Button.resetAll();
    bubbleInit();
    robot.reset();
  };
  setBubbleAbleToBeClicked = function(){
    var bubble;
    bubble = $('#info-bar');
    bubble.removeClass('disabled').addClass('enabled');
  };
  bubbleInit = function(){
    var bubble;
    bubble = $('#info-bar');
    bubble.removeClass('enabled').addClass('disabled');
    bubble.find('li.amount').text('');
    bubble.find('li.sequence').text('');
  };
  S1WaitUserClick = function(){
    console.log('waiting user to click...');
  };
  robot = {
    initial: function(){
      this.state = 'waiting';
      this.buttons = $('#control-ring .button');
      this.bubble = $('#info-bar');
      this.order = ["A", "B", "C", "D", "E"];
      this.point = 0;
    },
    startClick: function(){
      this.state = 'running';
      callHandler(0, 0);
    },
    getRandomOrder: function(){
      this.order.sort(function(){
        return Math.random() - 0.3;
      });
    },
    nextAimToClick: function(){
      if (this.state !== 'running') {
        null;
      } else if (this.point < this.order.length) {
        this.getNextButton().click();
      } else if (this.point === this.order.length) {
        this.bubble.click();
      } else {
        this.state = 'waiting';
      }
    },
    showOrder: function(){
      var bubble;
      bubble = $('#info-bar');
      bubble.find('li.sequence').text(this.order.join('->'));
    },
    getNextButton: function(){
      var index;
      index = this.order[this.point++].charCodeAt() - 'A'.charCodeAt();
      return this.buttons[index];
    },
    reset: function(){
      this.point = 0;
      this.state = 'waiting';
    }
  };
  S2RobotClickButtonsFromAToEAndThenClickBubble = function(){
    $('#button .apb').click(function(){
      if (robot.state === 'waiting') {
        reset();
        robot.startClick();
      }
    });
  };
  S4RobotClickButtonsInARandomOrderAndThenClickBubble = function(){
    $('#button .apb').click(function(){
      if (robot.state === 'waiting') {
        reset();
        robot.getRandomOrder();
        robot.showOrder();
        robot.startClick();
      }
    });
  };
  S5RobotClickButtonsInARandomOrderAndThenClickBubbleWithPossibleToFail = function(){
    $('#button .apb').click(function(){
      if (robot.state === 'waiting') {
        reset();
        robot.getRandomOrder();
        robot.showOrder();
        robot.startClick();
      }
    });
  };
  checkBubbleAbleToBeClicked = function(currentSum){
    if (Button.allButtonsAreDone()) {
      setBubbleAbleToBeClicked();
    }
    $('#info-bar').click(currentSum);
  };
  callHandler = function(currentIndex, currentSum){
    if (currentIndex === robot.order.length) {
      null;
    } else if (robot.order[currentIndex] === 'A') {
      AHandler(currentIndex, currentSum);
    } else if (robot.order[currentIndex] === 'B') {
      BHandler(currentIndex, currentSum);
    } else if (robot.order[currentIndex] === 'C') {
      CHandler(currentIndex, currentSum);
    } else if (robot.order[currentIndex] === 'D') {
      DHandler(currentIndex, currentSum);
    } else if (robot.order[currentIndex] === 'E') {
      EHandler(currentIndex, currentSum);
    }
  };
  AHandler = function(currentIndex, currentSum){
    var failureNumber, error, this$ = this;
    failureNumber = 0.3;
    try {
      if (Math.random() < failureNumber) {
        throw {
          message: '这不是个天大的秘密',
          currentSum: currentSum
        };
      } else {
        $('#A').removeClass('enabled').addClass('waiting');
        $.get('/', function(number, result){
          setNumber('A', number);
          showMessage('A', '这是个天大的秘密');
          callHandler(currentIndex + 1, parseInt(currentSum + parseInt(number)));
          setTimeout(checkBubbleAbleToBeClicked(currentSum));
        });
      }
    } catch (e$) {
      error = e$;
      showMessage('A', error.message);
      callHandler(currentIndex + 1, parseInt(currentSum + parseInt(error.number)));
      setTimeout(checkBubbleAbleToBeClicked(currentSum));
    }
  };
  BHandler = function(currentIndex, currentSum){
    var failureNumber, error, this$ = this;
    failureNumber = 0.3;
    try {
      if (Math.random() < failureNumber) {
        throw {
          message: '我知道',
          currentSum: currentSum
        };
      } else {
        $('#B').removeClass('enabled').addClass('waiting');
        $.get('/', function(number, result){
          setNumber('B', number);
          showMessage('B', '我不知道');
          callHandler(currentIndex + 1, parseInt(currentSum + parseInt(number)));
          setTimeout(checkBubbleAbleToBeClicked(currentSum));
        });
      }
    } catch (e$) {
      error = e$;
      showMessage('B', error.message);
      callHandler(currentIndex + 1, parseInt(currentSum + parseInt(error.number)));
      setTimeout(checkBubbleAbleToBeClicked(currentSum));
    }
  };
  CHandler = function(currentIndex, currentSum){
    var failureNumber, error, this$ = this;
    failureNumber = 0.3;
    try {
      if (Math.random() < failureNumber) {
        throw {
          message: '你知道',
          currentSum: currentSum
        };
      } else {
        $('#C').removeClass('enabled').addClass('waiting');
        $.get('/', function(number, result){
          setNumber('C', number);
          showMessage('C', '你不知道');
          callHandler(currentIndex + 1, parseInt(currentSum + parseInt(number)));
          setTimeout(checkBubbleAbleToBeClicked(currentSum));
        });
      }
    } catch (e$) {
      error = e$;
      showMessage('C', error.message);
      callHandler(currentIndex + 1, parseInt(currentSum + parseInt(error.number)));
      setTimeout(checkBubbleAbleToBeClicked(currentSum));
    }
  };
  DHandler = function(currentIndex, currentSum){
    var failureNumber, error, this$ = this;
    failureNumber = 0.3;
    try {
      if (Math.random() < failureNumber) {
        throw {
          message: '他知道',
          currentSum: currentSum
        };
      } else {
        $('#D').removeClass('enabled').addClass('waiting');
        $.get('/', function(number, result){
          setNumber('D', number);
          showMessage('D', '他不知道');
          callHandler(currentIndex + 1, parseInt(currentSum + parseInt(number)));
          setTimeout(checkBubbleAbleToBeClicked(currentSum));
        });
      }
    } catch (e$) {
      error = e$;
      showMessage('D', error.message);
      callHandler(currentIndex + 1, parseInt(currentSum + parseInt(error.number)));
      setTimeout(checkBubbleAbleToBeClicked(currentSum));
    }
  };
  EHandler = function(currentIndex, currentSum){
    var failureNumber, error, this$ = this;
    failureNumber = 0.3;
    try {
      if (Math.random() < failureNumber) {
        throw {
          message: '不怪',
          currentSum: currentSum
        };
      } else {
        $('#E').removeClass('enabled').addClass('waiting');
        $.get('/', function(number, result){
          setNumber('E', number);
          showMessage('E', '才怪');
          callHandler(currentIndex + 1, parseInt(currentSum + parseInt(number)));
          setTimeout(checkBubbleAbleToBeClicked(currentSum));
        });
      }
    } catch (e$) {
      error = e$;
      showMessage('E', error.message);
      callHandler(currentIndex + 1, parseInt(currentSum + parseInt(error.number)));
      setTimeout(checkBubbleAbleToBeClicked(currentSum));
    }
  };
  bubbleHandler = function(currentSum){
    var failureNumber, error;
    failureNumber = 0.3;
    try {
      if (Math.random() < failureNumber) {
        throw {
          message: '楼主异步调用战斗力感人，目测超过' + parseInt(currentSum, {
            currentSum: currentSum
          })
        };
      } else {
        showMessage(null, '楼主异步调用战斗力感人，目测不超过' + parseInt(currentSum));
      }
    } catch (e$) {
      error = e$;
      showMessage(null, error.message);
    }
  };
  setNumber = function(char, number){
    $('#' + char.toString()).find('.unread').text(number);
    $('#' + char.toString()).removeClass('disabled enabled waiting').addClass('done');
  };
  showMessage = function(char, message){
    var bubble;
    if (char !== null) {
      console.log("button " + char + " says: " + message);
    }
    bubble = $('#info-bar');
    bubble.find('li.amount').text(message);
  };
}).call(this);
