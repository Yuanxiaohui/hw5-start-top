// Generated by LiveScript 1.3.1
(function(){
  var s2RobotClickInOrder, Robot, Button, addClickingHandlerToAllButtons, addResettingWhenLeaveApb, addClickingHandlerToTheBubble;
  $(function(){
    addClickingHandlerToAllButtons(function(){
      Robot.clickNext();
    });
    addClickingHandlerToTheBubble();
    addResettingWhenLeaveApb();
    return s2RobotClickInOrder();
  });
  s2RobotClickInOrder = function(){
    $('#button .apb').click(function(){
      if (Robot.state === 'unclicked') {
        Robot.clickNext();
      }
    });
  };
  Robot = (function(){
    Robot.displayName = 'Robot';
    var prototype = Robot.prototype, constructor = Robot;
    Robot.buttons = $('#control-ring .button');
    Robot.bubble = $('#info-bar');
    Robot.sequence = [0, 1, 2, 3, 4];
    Robot.charSequence = ["A", "B", "C", "D", "E"];
    Robot.cursor = 0;
    Robot.state = 'unclicked';
    /* this function is used to start the click in-order as well as the callback function of a click*/
    Robot.clickNext = function(){
      if (this.cursor === this.sequence.length) {
        setTimeout(function(){
          Robot.bubble.click();
        }, 350);
      } else {
        Robot.state = 'clicked';
        setTimeout(function(){
          Robot.clickCurButtonAndGetNext().click();
        }, 400);
      }
    };
    Robot.clickCurButtonAndGetNext = function(){
      var cur;
      cur = this.sequence[this.cursor++];
      return this.buttons[cur];
    };
    function Robot(){}
    return Robot;
  }());
  Button = (function(){
    Button.displayName = 'Button';
    var prototype = Button.prototype, constructor = Button;
    Button.buttons = [];
    Button.sum = 0;
    Button.disableAllOtherButtons = function(thisButton){
      var i$, ref$, len$, button, results$ = [];
      for (i$ = 0, len$ = (ref$ = this.buttons).length; i$ < len$; ++i$) {
        button = ref$[i$];
        if (button !== thisButton && button.state !== 'done') {
          results$.push(button.disable());
        }
      }
      return results$;
    };
    Button.enableAllOtherButtons = function(thisButton){
      var i$, ref$, len$, button, results$ = [];
      for (i$ = 0, len$ = (ref$ = this.buttons).length; i$ < len$; ++i$) {
        button = ref$[i$];
        if (button !== thisButton && button.state !== 'done') {
          results$.push(button.enable());
        }
      }
      return results$;
    };
    Button.allButtonIsDone = function(){
      var i$, ref$, len$, button;
      for (i$ = 0, len$ = (ref$ = this.buttons).length; i$ < len$; ++i$) {
        button = ref$[i$];
        if (button.state !== 'done') {
          return false;
        }
      }
      return true;
    };
    Button.getSum = function(){
      return this.sum;
    };
    Button.resetAll = function(){
      var i$, ref$, len$, button;
      for (i$ = 0, len$ = (ref$ = this.buttons).length; i$ < len$; ++i$) {
        button = ref$[i$];
        button.reset();
      }
    };
    function Button(dom, callbackToTheNextStep){
      var this$ = this;
      this.dom = dom;
      this.callbackToTheNextStep = callbackToTheNextStep;
      this.state = 'enabled';
      this.redDot = this.dom.find('.unread');
      this.dom.click(function(){
        if (this$.state === 'enabled') {
          this$.constructor.disableAllOtherButtons(this$);
          this$.wait();
          this$.fetchNumberAndShow();
        }
      });
      this.constructor.buttons.push(this);
    }
    prototype.bubbleCheck = function(){
      if (this.constructor.allButtonIsDone()) {
        return $('#info-bar').addClass('blue').removeClass('grey');
      }
    };
    prototype.fetchNumberAndShow = function(){
      var this$ = this;
      $.get('/', function(number, result){
        if (this$.state === 'waiting') {
          this$.redDot.text(number);
          this$.constructor.enableAllOtherButtons(this$);
          this$.constructor.sum += parseInt(number);
          this$.done();
          this$.bubbleCheck();
        }
        if (Robot.state === 'clicked') {
          this$.callbackToTheNextStep();
        }
      });
    };
    prototype.disable = function(){
      this.state = 'disabled';
      this.dom.addClass('disabled');
    };
    prototype.enable = function(){
      this.state = 'enabled';
      this.dom.removeClass('disabled');
    };
    prototype.wait = function(){
      this.redDot.addClass('appear');
      this.state = 'waiting';
      this.dom.find('.unread').text('...');
    };
    prototype.done = function(){
      this.dom.addClass('disabled');
      this.state = 'done';
    };
    prototype.reset = function(){
      this.state = 'enabled';
      this.dom.removeClass('disabled');
      this.dom.find('.unread').text('').removeClass('appear');
      this.constructor.sum = 0;
    };
    return Button;
  }());
  addClickingHandlerToAllButtons = function(nextStep){
    var i$, ref$, len$, dom, button;
    for (i$ = 0, len$ = (ref$ = $('#control-ring .button')).length; i$ < len$; ++i$) {
      dom = ref$[i$];
      button = new Button($(dom), nextStep);
    }
  };
  addResettingWhenLeaveApb = function(){
    $('#bottom-positioner').on('mouseleave', function(event){
      Button.resetAll();
      $('#info-bar').text('');
      Robot.cursor = 0;
      Robot.state = 'unclicked';
    });
  };
  addClickingHandlerToTheBubble = function(){
    var bubble;
    bubble = $('#info-bar');
    bubble.removeClass('blue').addClass('grey');
    bubble.click(function(){
      if (bubble.hasClass('blue')) {
        bubble.text(Button.getSum());
        bubble.removeClass('blue').addClass('grey');
      }
    });
  };
}).call(this);
