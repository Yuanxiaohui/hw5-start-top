// Generated by CoffeeScript 1.9.1
(function() {
  var $, $$, calculateSum, callback, connectServer, disableOtherButtons, enableOtherButtons, getRandomNunber, ifActivateBigButton, resetCalculator;

  $ = function(id) {
    return document.getElementById(id);
  };

  $$ = function(className) {
    return document.getElementsByClassName(className);
  };

  window.onload = function() {
    var bigButton, btn, buttons, hoverArea;
    bigButton = $('big-bar');
    btn = $('button');
    hoverArea = $('at-plus-container');
    buttons = $$('button');
    bigButton.disabled = 1;
    resetCalculator();
    bigButton.onclick = function() {
      return calculateSum();
    };
    btn.onmouseout = function() {
      var e, reltg;
      e = window.event;
      reltg = (e.relatedTarget ? e.relatedTarget : e.toElement);
      while (reltg && reltg !== this) {
        reltg = reltg.parentNode;
      }
      if (reltg !== this) {
        return resetCalculator();
      }
    };
    return getRandomNunber(bigButton, buttons);
  };

  connectServer = function(id) {
    var xmlHttp;
    xmlHttp = new XMLHttpRequest();
    xmlHttp.open('GET', '../server', true);
    xmlHttp.send(null);
    return xmlHttp.onreadystatechange = function() {
      if (xmlHttp.readyState === 4 && xmlHttp.status === 200) {
        return callback(xmlHttp.responseText, id);
      }
    };
  };

  getRandomNunber = function(bigButton, buttons) {
    var i, item, len, results;
    results = [];
    for (i = 0, len = buttons.length; i < len; i++) {
      item = buttons[i];
      results.push(item.onclick = function() {
        this.childNodes[1].classList.add('waiting');
        this.childNodes[1].innerHTML = '...';
        disableOtherButtons(buttons, this);
        return connectServer(this.id);
      });
    }
    return results;
  };

  callback = function(number, id) {
    var thisButton;
    thisButton = $(id);
    thisButton.childNodes[1].innerHTML = number;
    thisButton.classList.add('inactive');
    thisButton.disabled = 1;
    enableOtherButtons(thisButton);
    return ifActivateBigButton();
  };

  disableOtherButtons = function(buttons, button) {
    var i, item, len, results;
    results = [];
    for (i = 0, len = buttons.length; i < len; i++) {
      item = buttons[i];
      if (item !== button) {
        item.classList.add('inactive');
        results.push(item.disabled = 1);
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  enableOtherButtons = function(button) {
    var buttons, i, item, len, results;
    buttons = $$('button');
    results = [];
    for (i = 0, len = buttons.length; i < len; i++) {
      item = buttons[i];
      if (item !== button && !item.childNodes[1].classList.contains('waiting')) {
        item.classList.remove('inactive');
        results.push(item.disabled = 0);
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  ifActivateBigButton = function() {
    var bigButton, buttons, i, item, len;
    buttons = $$('button');
    bigButton = $('big-bar');
    for (i = 0, len = buttons.length; i < len; i++) {
      item = buttons[i];
      if (!item.childNodes[1].classList.contains('waiting')) {
        return;
      }
    }
    bigButton.disabled = 0;
    return bigButton.classList.remove('inactive');
  };

  calculateSum = function() {
    var bigButton, buttons, i, item, len, sum;
    buttons = $$('button');
    bigButton = $('big-bar');
    sum = 0;
    for (i = 0, len = buttons.length; i < len; i++) {
      item = buttons[i];
      sum += parseInt(item.childNodes[1].innerHTML);
    }
    bigButton.innerHTML = sum;
    bigButton.disabled = 1;
    return bigButton.classList.add('inactive');
  };

  resetCalculator = function() {
    var bigButton, buttons, i, item, len, results;
    buttons = $$('button');
    bigButton = $('big-bar');
    bigButton.disabled = 1;
    bigButton.innerHTML = '';
    bigButton.classList.toggle('inactive', true);
    results = [];
    for (i = 0, len = buttons.length; i < len; i++) {
      item = buttons[i];
      item.disabled = 0;
      item.classList.toggle('inactive', false);
      results.push(item.childNodes[1].classList.toggle('waiting', false));
    }
    return results;
  };

}).call(this);
