// Generated by CoffeeScript 1.9.1
(function() {
  var $, $$, addClickHandlerToAllButtons, calculateResult, callback, displayResultOnBubble, flag, getRandomOrder, howManyButtonsHaveGetRandomNumber, makeRequest, reset, robot, robotIsWorking;

  $ = function(id) {
    return document.getElementById(id);
  };

  $$ = function(tag) {
    return document.getElementsByTagName(tag);
  };

  window.onload = function() {
    $('info-bar').className = 'bubbleDisable';
    $('info-bar').onclick = function() {
      if (flag === 'DONE') {
        this.innerHTML = calculateResult();
      }
      return this.className = 'bubbleDisable';
    };
    $('button').onmouseout = function() {
      var e, reltg;
      e = window.event;
      reltg = (e.relatedTarget ? e.relatedTarget : e.toElement);
      while (reltg && reltg !== this) {
        reltg = reltg.parentNode;
      }
      if (reltg !== this) {
        return reset();
      }
    };
    document.getElementsByClassName('icon')[0].onclick = function() {
      reset();
      return robot();
    };
    return addClickHandlerToAllButtons();
  };

  flag = 'LOADING';

  robotIsWorking = false;

  howManyButtonsHaveGetRandomNumber = function() {
    var item, k, len, num, ref;
    num = 0;
    ref = $$('button');
    for (k = 0, len = ref.length; k < len; k++) {
      item = ref[k];
      if (item.getElementsByTagName('span')[0] && item.getElementsByTagName('span')[0].innerHTML !== '...') {
        num++;
      }
    }
    return num;
  };

  calculateResult = function() {
    var item, k, len, ref, result;
    result = 0;
    ref = $$('button');
    for (k = 0, len = ref.length; k < len; k++) {
      item = ref[k];
      result += parseInt(item.getElementsByTagName('span')[0].innerHTML);
    }
    return result;
  };

  reset = function() {
    var button, k, len, ref, results;
    flag = 'LOADING';
    robotIsWorking = false;
    $('info-bar').innerHTML = '';
    $('info-bar').className = 'bubbleDisable';
    ref = $$('button');
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      button = ref[k];
      button.className = 'active';
      button.disabled = '';
      if (button.getElementsByTagName('span')[0] != null) {
        results.push(button.removeChild(button.getElementsByTagName('span')[0]));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  addClickHandlerToAllButtons = function() {
    var item, k, len, ref, results;
    ref = $$('button');
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      item = ref[k];
      results.push(item.onclick = function() {
        var l, len1, otherItem, ref1;
        this.innerHTML = this.innerHTML + "<span class='unread'>...</span>";
        this.disabled = 'disabled';
        ref1 = $$('button');
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          otherItem = ref1[l];
          if (otherItem !== this) {
            if (!otherItem.getElementsByTagName('span')[0]) {
              otherItem.className = 'disable';
              otherItem.disabled = 'disabled';
            }
          }
        }
        return makeRequest(this.id);
      });
    }
    return results;
  };

  makeRequest = function(id) {
    var xmlHttp;
    xmlHttp = new XMLHttpRequest();
    xmlHttp.onreadystatechange = function() {
      if (xmlHttp.readyState === 4 && xmlHttp.status === 200) {
        return callback(xmlHttp.responseText, id);
      }
    };
    xmlHttp.open('GET', '/', true);
    return xmlHttp.send(null);
  };

  callback = function(number, id) {
    var k, len, otherItem, ref, thisButton;
    thisButton = $(id);
    if (thisButton.getElementsByTagName('span')[0]) {
      thisButton.innerHTML = thisButton.innerHTML.replace('...', number);
      thisButton.className = 'disable';
      thisButton.disabled = 'disabled';
      flag = 'DONE';
      ref = $$('button');
      for (k = 0, len = ref.length; k < len; k++) {
        otherItem = ref[k];
        if (otherItem !== thisButton && !otherItem.getElementsByTagName('span')[0]) {
          otherItem.className = 'active';
          otherItem.disabled = '';
          flag = 'LOADING';
        }
      }
      if (flag === 'DONE') {
        displayResultOnBubble();
      }
      if (robotIsWorking) {
        return robot();
      }
    }
  };

  displayResultOnBubble = function() {
    return $('info-bar').className = 'bubbleActive';
  };

  robot = function() {
    var id, rand;
    if (flag === 'LOADING') {
      if (!robotIsWorking) {
        rand = getRandomOrder();
      }
      robotIsWorking = true;
      id = $('info-bar').innerHTML[howManyButtonsHaveGetRandomNumber()].toLowerCase();
      return $(id).click();
    } else {
      return $('info-bar').click();
    }
  };

  getRandomOrder = function() {
    var i, item, j, k, len, rand, str, temp, val;
    rand = [];
    i = 0;
    while (i < 5) {
      val = Math.floor(Math.random() * 5);
      j = 0;
      temp = rand.length;
      while (j < rand.length) {
        if (rand[j] === val) {
          break;
        }
        j++;
      }
      if (j === temp) {
        rand[j] = val;
      } else {
        i--;
      }
      i++;
    }
    str = '';
    for (k = 0, len = rand.length; k < len; k++) {
      item = rand[k];
      switch (item) {
        case 0:
          str += 'A';
          break;
        case 1:
          str += 'B';
          break;
        case 2:
          str += 'C';
          break;
        case 3:
          str += 'D';
          break;
        case 4:
          str += 'E';
          break;
        default:
          console.log('RANDOM ERROR!');
      }
    }
    $('info-bar').innerHTML = str;
    return rand;
  };

}).call(this);
