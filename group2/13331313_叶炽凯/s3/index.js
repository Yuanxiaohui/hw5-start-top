// Generated by LiveScript 1.3.1
(function(){
  var Button, displayMassage, initAllButtons, initBubble, resetWhenLeaveButton, reset, enableAutoClick, robot, calculator;
  Button = (function(){
    Button.displayName = 'Button';
    var prototype = Button.prototype, constructor = Button;
    Button.buttons = [];
    Button.FAILRATE = 0.2;
    Button.disableOtherButtons = function(theButton){
      var i$, ref$, len$, button, results$ = [];
      for (i$ = 0, len$ = (ref$ = this.buttons).length; i$ < len$; ++i$) {
        button = ref$[i$];
        if (button !== theButton && button.state !== 'done') {
          results$.push(button.disable());
        }
      }
      return results$;
    };
    Button.enabledOtherButtons = function(theButton){
      var i$, ref$, len$, button, results$ = [];
      for (i$ = 0, len$ = (ref$ = this.buttons).length; i$ < len$; ++i$) {
        button = ref$[i$];
        if (button !== theButton && button.state !== 'done') {
          results$.push(button.enable());
        }
      }
      return results$;
    };
    Button.resetAllButtons = function(){
      var i$, ref$, len$, button, results$ = [];
      for (i$ = 0, len$ = (ref$ = this.buttons).length; i$ < len$; ++i$) {
        button = ref$[i$];
        results$.push(button.reset());
      }
      return results$;
    };
    Button.clickAll = function(){
      var i$, ref$, len$, button, results$ = [];
      for (i$ = 0, len$ = (ref$ = this.buttons).length; i$ < len$; ++i$) {
        button = ref$[i$];
        results$.push(button.dom.click());
      }
      return results$;
    };
    function Button(dom, goodMassage, badMassage, callBackFunc){
      var this$ = this;
      this.dom = dom;
      this.goodMassage = goodMassage;
      this.badMassage = badMassage;
      this.callBackFunc = callBackFunc;
      this.state = 'enabled';
      this.dom.click(function(){
        if (this$.state === 'enabled') {
          console.log("button clicked");
          this$.waiting();
          this$.getNumberAndDisplay();
          if (robot.allClickOn !== true) {
            return this$.constructor.disableOtherButtons(this$);
          }
        }
      });
      this.constructor.buttons.push(this);
    }
    Button.allButtonsDone = function(){
      var i$, ref$, len$, button;
      for (i$ = 0, len$ = (ref$ = this.buttons).length; i$ < len$; ++i$) {
        button = ref$[i$];
        if (button.state !== 'done') {
          return false;
        }
      }
      return true;
    };
    Button.enableBubble = function(){
      console.log('bubble enabled');
      return $('#info-bar').addClass('enable');
    };
    prototype.getNumberAndDisplay = function(){
      var this$ = this;
      this.dom.find('.unread').text('...');
      return $.get('/api/random', function(number, result){
        if (this$.state !== 'waiting' && this$.state !== 'enabled') {
          return;
        }
        if (robot.allClickOn === false && this$.state !== 'waiting') {
          return;
        }
        this$.done();
        if (this$.constructor.allButtonsDone()) {
          this$.constructor.enableBubble();
        }
        this$.displayNumber(number);
        calculator.add(number);
        this$.constructor.enabledOtherButtons(this$);
        this$.successOrFail(number);
      });
    };
    prototype.displayNumber = function(number){
      return this.dom.find('.unread').text(number);
    };
    prototype.successOrFail = function(number){
      var isSuccess, error;
      if (isSuccess = Math.random() > this.constructor.FAILRATE) {
        this.saying(this.goodMassage);
        return this.callBackFunc(error = null, number);
      } else {
        this.saying(this.badMassage);
        return this.callBackFunc(this.badMassage, number);
      }
    };
    prototype.saying = function(message){
      $('#doubi').text(message);
    };
    prototype.disable = function(){
      this.state = 'disabled';
      this.dom.removeClass('enable').addClass('disable');
      console.log('button.disabled');
    };
    prototype.enable = function(){
      this.state = 'enabled';
      this.dom.removeClass('disable').addClass('enable');
      console.log('button.enabled');
    };
    prototype.done = function(){
      this.state = 'done';
      this.dom.removeClass('waiting').addClass('done');
      console.log('button.done');
    };
    prototype.waiting = function(){
      this.state = 'waiting';
      this.dom.removeClass('enable').addClass('button.waiting');
      console.log('button.waiting');
    };
    prototype.reset = function(){
      this.state = 'enabled';
      this.dom.removeClass('disable waiting done').addClass('enable');
      this.dom.find('.unread').text('');
      console.log('button.reset');
    };
    return Button;
  }());
  displayMassage = function(){
    return $['#info-bar'];
  };
  initAllButtons = function(callBack){
    var goodMessages, badMessages, i$, ref$, len$, results$ = [];
    console.log("start init");
    goodMessages = ['这是个天大的秘密', '我不知道', '你不知道', '他不知道', '才怪'];
    badMessages = ['这不是个天大的秘密', '我知道', '你知道', '他知道', '不怪'];
    for (i$ = 0, len$ = (ref$ = $('#control-ring .button')).length; i$ < len$; ++i$) {
      results$.push((fn$.call(this, i$, ref$[i$])));
    }
    return results$;
    function fn$(i, dom){
      var button;
      return button = new Button($(dom), goodMessages[i], badMessages[i], function(error, number){
        console.log('call-back');
        if (error) {
          displayMassage(this.badMassage);
        } else {
          displayMassage(this.goodMassage);
        }
        if (typeof callBack == 'function') {
          callBack();
        }
      });
    }
  };
  initBubble = function(){
    var bubble;
    bubble = $('#info-bar');
    bubble.addClass('disable');
    return bubble.click(function(){
      if (Button.allButtonsDone()) {
        bubble.find('span').text(calculator.sum);
        $('#doubi').text('楼主blablablabla');
      }
    });
  };
  resetWhenLeaveButton = function(){
    var isEnterOther;
    isEnterOther = false;
    $('#at-plus-container').on('mouseenter', function(){
      isEnterOther = true;
    });
    return $('#at-plus-container').on('mouseleave', function(event){
      isEnterOther = false;
      setTimeout(function(){
        if (!isEnterOther) {
          reset();
        }
      }, 0);
    });
  };
  reset = function(){
    var bubble;
    console.log('reset');
    calculator.sum = 0;
    bubble = $('#info-bar');
    bubble.find('span').text('');
    robot.init();
    Button.resetAllButtons();
    $('#order').text('');
    return $('#doubi').text('');
  };
  enableAutoClick = function(){
    var startButton;
    console.log('enable-auto-click');
    startButton = $('#button .icon');
    return startButton.click(function(){
      if (robot.autoButtonState) {
        robot.autoOn = true;
        robot.autoButtonState = false;
        robot.clickAll();
      }
    });
  };
  robot = {
    init: function(){
      this.buttons = $('#control-ring .button');
      this.bubble = $('#info-bar');
      this.index = 0;
      this.order = ["A", "B", "C", "D", "E"];
      this.autoOn = false;
      this.autoButtonState = true;
      this.allClickOn = false;
    },
    randomOrder: function(){
      this.order.sort(function(){
        return 0.5 - Math.random();
      });
    },
    displayOrder: function(){
      $('#order').text(this.order);
    },
    nextClick: function(){
      if (this.autoOn) {
        if (this.index === this.order.length) {
          this.bubble.click();
        } else {
          this.buttons[this.order[this.index].charCodeAt() - 'A'.charCodeAt()].click();
          this.index++;
        }
      }
    },
    clickAll: function(){
      this.allClickOn = true;
      Button.clickAll();
    }
  };
  calculator = {
    sum: 0,
    add: function(number){
      return this.sum += parseInt(number);
    }
  };
  $(function(){
    robot.init();
    initAllButtons(function(){
      if (robot.allClickOn) {
        robot.bubble.click();
      }
    });
    initBubble();
    resetWhenLeaveButton();
    enableAutoClick();
  });
}).call(this);
