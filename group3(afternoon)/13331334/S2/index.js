// Generated by LiveScript 1.3.1
(function(){
  var Button, checkAllCompleted, initializeAllButtons, initializeInfobar, sumUpAndShow, ResetObserver, robot;
  Button = (function(){
    Button.displayName = 'Button';
    var prototype = Button.prototype, constructor = Button;
    Button.buttons = [];
    Button.ajaxRequests = [];
    Button.disableOtherButtons = function(currentButton){
      var i$, ref$, len$, button;
      for (i$ = 0, len$ = (ref$ = Button.buttons).length; i$ < len$; ++i$) {
        button = ref$[i$];
        if (button !== currentButton) {
          $(button.button).addClass("disabled");
        }
      }
    };
    Button.enableOtherButtons = function(currentButton){
      var i$, ref$, len$, button;
      for (i$ = 0, len$ = (ref$ = this.buttons).length; i$ < len$; ++i$) {
        button = ref$[i$];
        if (button !== currentButton && button.state !== "done") {
          $(button.button).removeClass("disabled");
        }
      }
    };
    function Button(button){
      this.fetchAndShowNumber = bind$(this, 'fetchAndShowNumber', prototype);
      this.buttonClickHandler = bind$(this, 'buttonClickHandler', prototype);
      this.button = button;
      this.state = "enabled";
      $(button).on("click", this.buttonClickHandler);
      this.circle = document.createElement("span");
      $(this.circle).addClass("unread");
      this.constructor.buttons.push(this);
    }
    prototype.buttonClickHandler = function(){
      if (this.state === "enabled" && !$(this.button).hasClass("disabled")) {
        this.constructor.disableOtherButtons(this);
        this.fetchAndShowNumber();
      }
    };
    prototype.fetchAndShowNumber = function(){
      var this$ = this;
      this.state = "waiting";
      $(this.circle).text("...");
      this.button.appendChild(this.circle);
      $.get("/", function(data){
        this$.state = "done";
        $(this$.button).addClass("disabled");
        $(this$.circle).text(data);
        this$.constructor.enableOtherButtons(this$.button);
        checkAllCompleted();
        robot.next();
      });
    };
    return Button;
  }());
  checkAllCompleted = function(){
    var i$, ref$, len$, button;
    for (i$ = 0, len$ = (ref$ = Button.buttons).length; i$ < len$; ++i$) {
      button = ref$[i$];
      if (button.state !== "done") {
        return;
      }
    }
    $("#info-bar").removeClass("disabled");
  };
  initializeAllButtons = function(){
    $("li.button").each(function(index){
      new Button(this);
    });
  };
  initializeInfobar = function(){
    $("#info-bar").on("click", function(){
      if (!$(this).hasClass("disabled")) {
        sumUpAndShow();
      }
    });
  };
  sumUpAndShow = function(){
    var sum, i$, ref$, len$, button;
    sum = 0;
    for (i$ = 0, len$ = (ref$ = Button.buttons).length; i$ < len$; ++i$) {
      button = ref$[i$];
      sum += parseInt($(button.button.lastChild).text());
    }
    $("#info-bar span").text(sum).toString;
    $("#info-bar").addClass("disabled");
  };
  ResetObserver = (function(){
    ResetObserver.displayName = 'ResetObserver';
    var prototype = ResetObserver.prototype, constructor = ResetObserver;
    function ResetObserver(){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.cancel = bind$(this$, 'cancel', prototype);
      this$.reset = bind$(this$, 'reset', prototype);
      this$.setFunction = null;
      $("#info-bar").on("mouseleave", this$.reset);
      $("li.button").on("mouseleave", this$.reset);
      $(".apb").on("mouseleave", this$.reset);
      $("#info-bar").on("mouseover", this$.cancel);
      $("li.button").on("mouseover", this$.cancel);
      $(".apb").on("mouseover", this$.cancel);
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.reset = function(){
      this.setFunction = setTimeout(this.doReset, 1000);
    };
    prototype.cancel = function(){
      if (this.setFunction) {
        clearTimeout(this.setFunction);
        this.setFunction = null;
      }
    };
    prototype.doReset = function(){
      var i$, ref$, len$, ajaxRequest, button;
      $("#info-bar span").text("");
      $("#info-bar").addClass("disabled");
      $(".unread").remove();
      for (i$ = 0, len$ = (ref$ = Button.ajaxRequests).length; i$ < len$; ++i$) {
        ajaxRequest = ref$[i$];
        ajaxRequest.abort();
      }
      Button.ajaxRequests = [];
      for (i$ = 0, len$ = (ref$ = Button.buttons).length; i$ < len$; ++i$) {
        button = ref$[i$];
        button.state = "enabled";
        $(button.button).removeClass("disabled");
        robot.current = 0;
        robot.started = false;
      }
    };
    return ResetObserver;
  }());
  robot = (function(){
    robot.displayName = 'robot';
    var prototype = robot.prototype, constructor = robot;
    robot.current = 0;
    robot.started = false;
    robot.start = function(){
      if (!robot.started) {
        robot.started = true;
        robot.next();
      }
    };
    robot.next = function(){
      if (robot.started) {
        while (robot.current < Button.buttons.length && $(Button.buttons[robot.current].button).hasClass("disabled")) {
          robot.current++;
        }
        if (robot.current < Button.buttons.length) {
          $(Button.buttons[robot.current].button).click();
        } else {
          $("#info-bar").click();
        }
        robot.current++;
      }
    };
    function robot(){}
    return robot;
  }());
  $(function(){
    initializeAllButtons();
    initializeInfobar();
    new ResetObserver;
    $(".apb").on("click", robot.start);
  });
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);
