1.通过top的方式写代码，更加清晰每个步骤的任务
2.由于对每个模块的内容更加清晰，所以在出现bug时更加容易找到bug
3.把问题分成一个个小问题，再通过完成小问题来实现
4.每次解决一个小问题之后再到下一个问题，问题就更容易解决。
具体过程：
1.首先明白问题的需求，在这个问题中的需求是做按钮实现不同的功能。
2.将总体的需求拆分成许多个小部分，然后逐步解决。在这个问题中，我们的问题是做按钮，由于涉及很多个部分，
可以分成一个个小部分。我这次首先考虑的对象是小的按钮。所有的小按钮可以抽象为一个类来涉及功能。然后去完成
这个小按钮的类
3.把小按钮的类再细化，分成一个个小功能。比如显示气泡，获得数字，状态切换。
4.把不同的功能给整合起来。比如小气泡和大气泡之间的交互，@button调用其他的功能来实现最终的功能等等。
TOP中的收获：
1.如前文所说，由于一开始就把问题细化，可以理解每一部分的功能，每一部分的想法，这样对于问题认识更加清晰，更容易
完成后面的代码实现
2.由于top的方法，理解每一部分的功能和想法，所以更加容易地在出现问题的时候能够找到错误。比如气泡没有变成灰色的时候能够
明白是因为点击的功能有问题还是因为状态转换的功能有问题
3.更加注重函数名和代码可读性。由于是按照想法写代码，所以函数和变量的名字以及过程更加贴近我们的思维，这更有利于代码
可读性的提高，方便以后的更改和维护。
总而言之，top方法对于编程的效率和质量都有很大的帮助
