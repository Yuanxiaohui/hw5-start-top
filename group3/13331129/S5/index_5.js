// Generated by LiveScript 1.3.1
var Button, createFiveButtons, reset, addResettingWhenLeaveApb, addClickingToBubble, calculateSum, robot, prestartRobot;
Button = (function(){
  Button.displayName = 'Button';
  var prototype = Button.prototype, constructor = Button;
  Button.FAILURERATE = 0.3;
  Button.buttons = [];
  Button.disableOtherButtons = function(thisButton){
    var i$, ref$, len$, button;
    for (i$ = 0, len$ = (ref$ = this.buttons).length; i$ < len$; ++i$) {
      button = ref$[i$];
      if (button.dom !== thisButton && button.state !== 'done') {
        button.disable();
      }
    }
  };
  Button.enableOtherButtons = function(thisButton){
    var i$, ref$, len$, button;
    for (i$ = 0, len$ = (ref$ = this.buttons).length; i$ < len$; ++i$) {
      button = ref$[i$];
      if (button.dom !== thisButton && button.state !== 'done') {
        button.enable();
      }
    }
  };
  Button.resetAll = function(){
    var i$, ref$, len$, button;
    for (i$ = 0, len$ = (ref$ = this.buttons).length; i$ < len$; ++i$) {
      button = ref$[i$];
      button.reset();
    }
  };
  Button.allButtonIsDone = function(){
    var i$, ref$, len$, button;
    for (i$ = 0, len$ = (ref$ = this.buttons).length; i$ < len$; ++i$) {
      button = ref$[i$];
      if (button.state !== 'done') {
        return false;
      }
    }
    return true;
  };
  function Button(dom, goodMessage, badMessage, numberFetchedCallback){
    var this$ = this;
    this.dom = dom;
    this.goodMessage = goodMessage;
    this.badMessage = badMessage;
    this.numberFetchedCallback = numberFetchedCallback;
    this.state = "enabled";
    $(this.dom).css("background-color", "blue");
    $(this.dom).find(".unread").css("display", "none");
    $(this.dom).on("click", function(){
      if (this$.state === "enabled") {
        this$.constructor.disableOtherButtons(this$.dom);
        $(this$.dom).find(".unread").css("display", "inline");
        this$.showWaiting();
        this$.fetchNumberAndShow();
      }
    });
    this.constructor.buttons.push(this);
  }
  prototype.showWaiting = function(){
    $(this.dom).find('.unread').text("...");
  };
  prototype.successOrFail = function(number){
    var isSuccess, error;
    if (isSuccess = Math.random() > this.constructor.FAILURERATE) {
      this.showMessage(this.goodMessage);
      this.numberFetchedCallback(error = null, number);
    } else {
      this.showMessage(this.badMessage);
      this.numberFetchedCallback({
        message: this.badMessage,
        data: number
      });
    }
  };
  prototype.fetchNumberAndShow = function(){
    var this$ = this;
    $.get('/', function(number, result){
      this$.done();
      if (this$.constructor.allButtonIsDone()) {
        addClickingToBubble();
      }
      this$.constructor.enableOtherButtons(this$);
      this$.showNumber(number);
      if (this$.constructor.allButtonIsDone() && robot.cursor === 5) {
        calculateSum();
      }
      if (this$.state === "done") {
        $(this$.dom).css("background-color", "grey");
      }
      this$.successOrFail(number);
    });
  };
  prototype.showNumber = function(number){
    $(this.dom).find('.unread').text(number);
  };
  prototype.showMessage = function(message){
    var i$, ref$, len$, i, dom;
    for (i$ = 0, len$ = (ref$ = $(".callback")).length; i$ < len$; ++i$) {
      i = i$;
      dom = ref$[i$];
      if ($(dom).text() === "") {
        $(dom).text(message);
        break;
      }
    }
  };
  prototype.disable = function(){
    this.state = "disabled";
    $(this.dom).css("background-color", "grey");
  };
  prototype.enable = function(){
    this.state = "enabled";
    $(this.dom).css("background-color", "blue");
  };
  prototype.reset = function(){
    this.state = "enabled";
    $(this.dom).css("background-color", "blue");
    $(this.dom).find(".unread").css("display", "none");
  };
  prototype.done = function(){
    this.state = "done";
  };
  return Button;
}());
$(function(){
  addResettingWhenLeaveApb();
  createFiveButtons(function(){
    robot.clickNext();
  });
  robot.init();
  return prestartRobot();
});
createFiveButtons = function(next){
  var goodMessages, badMessages, i$, ref$, len$;
  goodMessages = ['A:这是个天大的秘密', 'B:我不知道', 'C:你不知道', 'D:他不知道', 'E:才怪'];
  badMessages = ['A:这不是个天大的秘密', 'B:我知道', 'C:你知道', 'D:他知道', 'E:不怪'];
  for (i$ = 0, len$ = (ref$ = $('#control-ring .button')).length; i$ < len$; ++i$) {
    (fn$.call(this, i$, ref$[i$]));
  }
  function fn$(i, dom){
    var button;
    button = new Button(dom, goodMessages[i], badMessages[i], function(error, number){
      if (typeof next == 'function') {
        next();
      }
    });
  }
};
reset = function(){
  var bubble;
  bubble = $('#info-bar');
  bubble.css("background-color", "gray");
  $(".sum").text("");
  Button.resetAll();
  robot.init();
  $(".callback").text("");
};
addResettingWhenLeaveApb = function(){
  var isEnterOther;
  isEnterOther = false;
  $('.button, #info-bar, #test, img').on('mouseenter', function(){
    isEnterOther = true;
  });
  $('#test, #info-bar, .button').on('mouseleave', function(event){
    isEnterOther = false;
    setTimeout(function(){
      if (!isEnterOther) {
        reset();
      }
    }, 0);
  });
};
addClickingToBubble = function(){
  var bubble;
  bubble = $('#info-bar');
  bubble.css("background-color", "blue");
  bubble.click(function(){
    if (Button.allButtonIsDone()) {
      calculateSum();
    }
  });
};
calculateSum = function(){
  var sum, i$, ref$, len$, button;
  sum = 0;
  for (i$ = 0, len$ = (ref$ = Button.buttons).length; i$ < len$; ++i$) {
    button = ref$[i$];
    sum = sum + parseInt($(button.dom).find(".unread").text());
  }
  $(".sum").text(sum);
  $(".callback").eq(5).text("大气泡：楼主异步调用战斗力感人，目测不超过" + sum);
  $('#info-bar').css("background-color", "gray");
};
robot = {
  init: function(){
    this.buttons = $('.button');
    this.bubble = $('#info-bar');
    this.sequence = ["A", "B", "C", "D", "E"];
    this.cursor = 0;
  },
  shuffleOrder: function(){
    this.sequence.sort(function(){
      return 0.5 - Math.random();
    });
  },
  clickNext: function(){
    if (this.cursor === this.sequence.length) {
      this.bubble.click();
    } else {
      robot.getNextButton().click();
    }
  },
  getNextButton: function(){
    var index;
    index = this.sequence[this.cursor++].charCodeAt() - 'A'.charCodeAt();
    return this.buttons[index];
  },
  showOrder: function(){
    $('.order').text(this.sequence.join(', '));
  }
};
prestartRobot = function(){
  $('.apb').click(function(){
    robot.shuffleOrder();
    robot.showOrder();
    robot.clickNext();
  });
};
