// Generated by LiveScript 1.3.1
(function(){
  var robotBoot, ah, bh, ch, dh, eh, robotStart, enableAllButtons, showRandomsInBigBubble, robotClick, setUnvisibleAllUnreads, setUnvisible, setVisible, getRan, checkAndSetAndContinueClick, setMes, checkAndSet, clickListener, enable, disable, disableBigBubble, bubbleListener, enableBigBubble, setWaitingStyle;
  window.onload = function(){
    setUnvisibleAllUnreads();
    disableBigBubble();
    robotBoot();
  };
  robotBoot = function(){
    var robotButton;
    robotButton = $('#bottom-positioner');
    robotButton[0].onclick = robotStart;
  };
  ah = function(n, randoms, total, handlers){
    var red, greys, i$, to$, i, mes, error;
    try {
      red = this.getElementsByClassName('unread')[0];
      setWaitingStyle(red);
      getRan(red, this, n, randoms, total, handlers);
      setVisible(red);
      greys = $('li');
      for (i$ = 0, to$ = greys.length - 1; i$ <= to$; ++i$) {
        i = i$;
        disable(greys[i]);
      }
      enable(this, handlers[randoms[n]]);
      if (Math.random() > 0.8) {
        throw {
          message: '这不是个秘密'
        };
      } else {
        mes = '这是个秘密';
        setMes(mes);
      }
    } catch (e$) {
      error = e$;
      setMes(error.message);
    }
  };
  bh = function(n, randoms, total, handlers){
    var red, greys, i$, to$, i, mes, error;
    try {
      red = this.getElementsByClassName('unread')[0];
      setWaitingStyle(red);
      getRan(red, this, n, randoms, total, handlers);
      setVisible(red);
      greys = $('li');
      for (i$ = 0, to$ = greys.length - 1; i$ <= to$; ++i$) {
        i = i$;
        disable(greys[i]);
      }
      enable(this, handlers[randoms[n]]);
      if (Math.random() > 0.8) {
        throw {
          message: '你知道'
        };
      } else {
        mes = '你不知道';
        setMes(mes);
      }
    } catch (e$) {
      error = e$;
      setMes(error.message);
    }
  };
  ch = function(n, randoms, total, handlers){
    var red, greys, i$, to$, i, mes, error;
    try {
      red = this.getElementsByClassName('unread')[0];
      setWaitingStyle(red);
      getRan(red, this, n, randoms, total, handlers);
      setVisible(red);
      greys = $('li');
      for (i$ = 0, to$ = greys.length - 1; i$ <= to$; ++i$) {
        i = i$;
        disable(greys[i]);
      }
      enable(this, handlers[randoms[n]]);
      if (Math.random() > 0.8) {
        throw {
          message: '我知道'
        };
      } else {
        mes = '我不知道';
        setMes(mes);
      }
    } catch (e$) {
      error = e$;
      setMes(error.message);
    }
  };
  dh = function(n, randoms, total, handlers){
    var red, greys, i$, to$, i, mes, error;
    try {
      red = this.getElementsByClassName('unread')[0];
      setWaitingStyle(red);
      getRan(red, this, n, randoms, total, handlers);
      setVisible(red);
      greys = $('li');
      for (i$ = 0, to$ = greys.length - 1; i$ <= to$; ++i$) {
        i = i$;
        disable(greys[i]);
      }
      enable(this, handlers[randoms[n]]);
      if (Math.random() > 0.8) {
        throw {
          message: '他知道'
        };
      } else {
        mes = '他不知道';
        setMes(mes);
      }
    } catch (e$) {
      error = e$;
      setMes(error.message);
    }
  };
  eh = function(n, randoms, total, handlers){
    var red, greys, i$, to$, i, mes, error;
    try {
      red = this.getElementsByClassName('unread')[0];
      setWaitingStyle(red);
      getRan(red, this, n, randoms, total, handlers);
      setVisible(red);
      greys = $('li');
      for (i$ = 0, to$ = greys.length - 1; i$ <= to$; ++i$) {
        i = i$;
        disable(greys[i]);
      }
      enable(this, handlers[randoms[n]]);
      if (Math.random() > 0.8) {
        throw {
          message: '不怪'
        };
      } else {
        mes = '才怪';
        setMes(mes);
      }
    } catch (e$) {
      error = e$;
      setMes(error.message);
    }
  };
  robotStart = function(){
    var handlers, randoms;
    handlers = [ah, bh, ch, dh, eh];
    randoms = [0, 1, 2, 3, 4];
    randoms.sort(function(){
      return Math.random() - 0.5;
    });
    showRandomsInBigBubble(randoms);
    enableAllButtons(handlers, randoms);
    robotClick(0, randoms, 0, handlers);
  };
  enableAllButtons = function(handlers, randoms){
    var greys, i$, to$, i;
    greys = $('li');
    for (i$ = 0, to$ = greys.length - 1; i$ <= to$; ++i$) {
      i = i$;
      enable(greys[i], handlers[randoms[i]]);
    }
  };
  showRandomsInBigBubble = function(randoms){
    var bubble, str, ini, i$, to$, i;
    bubble = $('#info-bar');
    str = '';
    ini = ['a', 'b', 'c', 'd', 'e'];
    for (i$ = 0, to$ = randoms.length - 1; i$ <= to$; ++i$) {
      i = i$;
      str += ini[randoms[i]];
    }
    bubble[0].innerHTML = str;
  };
  robotClick = function(n, randoms, total, handlers){
    var greys, grey;
    greys = $('li');
    grey = greys[randoms[n]];
    grey.onclick(n, randoms, total, handlers, event);
  };
  setUnvisibleAllUnreads = function(){
    var reds, i$, to$, i;
    reds = $('.unread');
    for (i$ = 0, to$ = reds.length - 1; i$ <= to$; ++i$) {
      i = i$;
      setUnvisible(reds[i]);
    }
  };
  setUnvisible = function(red){
    $(red).css('display', 'none');
  };
  setVisible = function(red){
    $(red).css('display', '');
  };
  getRan = function(red, grey, n, randoms, total, handlers){
    $.get('/', function(data, status){
      $(red).html(data);
      total += Number(data);
      checkAndSetAndContinueClick(red, grey, n, randoms, total, handlers);
    });
  };
  checkAndSetAndContinueClick = function(red, grey, n, randoms, total, handlers){
    if (!checkAndSet(red, grey, total, handlers, randoms)) {
      robotClick(n + 1, randoms, total, handlers);
    }
  };
  setMes = function(mes){
    var bubble;
    bubble = $('#info-bar');
    bubble[0].innerHTML = mes;
  };
  checkAndSet = function(red, grey, total, handlers, randoms){
    var greys, checkAll, i$, to$, i, bubble;
    greys = $('li');
    checkAll = true;
    for (i$ = 0, to$ = greys.length - 1; i$ <= to$; ++i$) {
      i = i$;
      if (!$(greys[i]).hasClass('checked')) {
        enable(greys[i], handlers[randoms[i]]);
      }
      red = greys[i].getElementsByClassName('unread')[0];
      if ($(red).html() === "") {
        checkAll = false;
      }
    }
    $(grey).addClass('checked');
    disable(grey);
    if (checkAll) {
      bubble = $('#info-bar');
      enableBigBubble(bubble, total);
    }
    return checkAll;
  };
  clickListener = function(){
    var red, greys, i$, to$, i;
    red = this.getElementsByClassName('unread')[0];
    setWaitingStyle(red);
    getRan(red, this);
    setVisible(red);
    greys = $('li');
    for (i$ = 0, to$ = greys.length - 1; i$ <= to$; ++i$) {
      i = i$;
      disable(greys[i]);
    }
    enable(this);
  };
  enable = function(grey, handler){
    $(grey).css('backgroundColor', 'blue');
    /*$(grey).click(click-listener)*/
    grey.onclick = handler;
  };
  disable = function(grey){
    $(grey).css('backgroundColor', 'grey');
    grey.onclick = null;
  };
  disableBigBubble = function(){
    var bubble;
    bubble = $('#info-bar');
    $(bubble).css('backgroundColor', 'grey');
    bubble.onclick = null;
  };
  bubbleListener = function(total){
    this.innerHTML = "楼主异步战斗力感人\n目测不超过:<div>" + total + "</div>";
  };
  enableBigBubble = function(bubble, total){
    $(bubble).css('backgroundColor', 'blue');
    bubble[0].onclick = bubbleListener;
    bubble[0].onclick(total, event);
  };
  setWaitingStyle = function(red){
    $(red).html('...');
  };
}).call(this);
