// Generated by LiveScript 1.3.1
(function(){
  var robotClickAToE, getOrder, s5Callback, makeAllButtonCanBeClicked, rebornAllButtons, makeButtonDisable, makeButtonEnable, AHandler, BHandler, CHandler, DHandler, EHandler, bubbleHandler, checkMouseLeave;
  window.onload = function(){
    makeAllButtonCanBeClicked();
    $("button").onmouseleave = rebornAllButtons;
    $("icon").onclick = robotClickAToE;
  };
  robotClickAToE = function(){
    var order;
    $("icon").onclick = "";
    order = getOrder();
    s5Callback(order, 0, 0);
  };
  getOrder = function(){
    var hash, i$, i, str, n, random;
    hash = [];
    for (i$ = 0; i$ < 5; ++i$) {
      i = i$;
      hash[i] = 0;
    }
    str = "";
    n = 0;
    while (n < 5) {
      random = Math.floor(Math.random() * 5);
      if (hash[random] === 0) {
        n++;
        hash[random] = 1;
        str = str + random.toString();
      }
    }
    $("info").style.fontSize = '16px';
    return str;
  };
  s5Callback = function(order, count, currentSum){
    var abcde, thisbutton;
    abcde = $("control-ring").children;
    thisbutton = parseInt(order[count]);
    abcde[thisbutton].onclick(order, count, currentSum, event);
  };
  makeAllButtonCanBeClicked = function(){
    var abcde;
    abcde = $("control-ring").children;
    abcde[0].onclick = AHandler;
    abcde[1].onclick = BHandler;
    abcde[2].onclick = CHandler;
    abcde[3].onclick = DHandler;
    abcde[4].onclick = EHandler;
  };
  rebornAllButtons = function(){
    var abcde, i$, to$, i, bubble;
    abcde = $("control-ring").children;
    for (i$ = 0, to$ = abcde.length; i$ < to$; ++i$) {
      i = i$;
      makeButtonEnable(abcde[i]);
    }
    bubble = $("info");
    bubble.style.backgroundColor = 'grey';
    bubble.innerHTML = "";
    $("icon").onclick = robotClickAToE;
    for (i$ = 0, to$ = abcde.length; i$ < to$; ++i$) {
      i = i$;
      abcde[i].style.backgroundColor = 'blue';
    }
  };
  makeButtonDisable = function(button){
    button.onclick = "";
    button.style.backgroundColor = 'grey';
  };
  makeButtonEnable = function(button){
    var abcde;
    if (button.childNodes.length === 2) {
      button.removeChild(button.childNodes[1]);
    }
    abcde = $("control-ring").children;
    if (abcde[0] === button) {
      abcde[0].onclick = AHandler;
    }
    if (abcde[1] === button) {
      abcde[1].onclick = BHandler;
    }
    if (abcde[2] === button) {
      abcde[2].onclick = CHandler;
    }
    if (abcde[3] === button) {
      abcde[3].onclick = DHandler;
    }
    if (abcde[4] === button) {
      abcde[4].onclick = EHandler;
    }
    button.style.backgroundColor = 'blue';
  };
  AHandler = function(order, count, currentSum){
    var rc, thisorder, thissum, abcde, i$, to$, i, thisbutton, message, err, xmlhttp;
    try {
      rc = document.createElement('span');
      rc.innerText = '...';
      rc.className = 'redcircle';
      rc.style.fontSize = '5px';
      this.appendChild(rc);
      thisorder = order;
      thissum = currentSum;
      abcde = $("control-ring").children;
      for (i$ = 0, to$ = abcde.length; i$ < to$; ++i$) {
        i = i$;
        if (abcde[i] !== this) {
          makeButtonDisable(abcde[i]);
        }
      }
      thisbutton = this;
      if (Math.random() > 0.8) {
        throw "这不是个天大的秘密";
      }
      message = '这是个天大的秘密';
      bubbleHandler(message, currentSum);
    } catch (e$) {
      err = e$;
      bubbleHandler(err, currentSum);
    }
    if (window.XMLHttpRequest) {
      xmlhttp = new XMLHttpRequest();
    } else {
      xmlhttp = new ActiveXObject('Microsoft.XMLHTTP');
    }
    xmlhttp.onreadystatechange = function(){
      var flag, abcde, i$, to$, i;
      if (xmlhttp.readyState === 4 && xmlhttp.status === 200) {
        rc.innerText = xmlhttp.responseText;
        thissum = thissum + parseInt(xmlhttp.responseText);
        flag = 1;
        abcde = $("control-ring").children;
        for (i$ = 0, to$ = abcde.length; i$ < to$; ++i$) {
          i = i$;
          if (abcde[i].childNodes.length === 1) {
            makeButtonEnable(abcde[i]);
            flag = 0;
          }
        }
        makeButtonDisable(thisbutton);
        if (flag === 1) {
          bubbleHandler('caculate', thissum);
        }
        count++;
        if (count !== 5 && checkMouseLeave() === 0) {
          s5Callback(thisorder, count, thissum);
        }
      }
    };
    xmlhttp.open('GET', '/', true);
    xmlhttp.send();
  };
  BHandler = function(order, count, currentSum){
    var rc, thisorder, thissum, abcde, i$, to$, i, thisbutton, message, err, xmlhttp;
    try {
      rc = document.createElement('span');
      rc.innerText = '...';
      rc.className = 'redcircle';
      rc.style.fontSize = '5px';
      this.appendChild(rc);
      thisorder = order;
      thissum = currentSum;
      abcde = $("control-ring").children;
      for (i$ = 0, to$ = abcde.length; i$ < to$; ++i$) {
        i = i$;
        if (abcde[i] !== this) {
          makeButtonDisable(abcde[i]);
        }
      }
      thisbutton = this;
      if (Math.random() > 0.8) {
        throw "我知道";
      }
      message = '我不知道';
      bubbleHandler(message, currentSum);
    } catch (e$) {
      err = e$;
      bubbleHandler(err, currentSum);
    }
    if (window.XMLHttpRequest) {
      xmlhttp = new XMLHttpRequest();
    } else {
      xmlhttp = new ActiveXObject('Microsoft.XMLHTTP');
    }
    xmlhttp.onreadystatechange = function(){
      var flag, abcde, i$, to$, i;
      if (xmlhttp.readyState === 4 && xmlhttp.status === 200) {
        rc.innerText = xmlhttp.responseText;
        thissum = thissum + parseInt(xmlhttp.responseText);
        flag = 1;
        abcde = $("control-ring").children;
        for (i$ = 0, to$ = abcde.length; i$ < to$; ++i$) {
          i = i$;
          if (abcde[i].childNodes.length === 1) {
            makeButtonEnable(abcde[i]);
            flag = 0;
          }
        }
        makeButtonDisable(thisbutton);
        if (flag === 1) {
          bubbleHandler('caculate', thissum);
        }
        count++;
        if (count !== 5 && checkMouseLeave() === 0) {
          s5Callback(thisorder, count, thissum);
        }
      }
    };
    xmlhttp.open('GET', '/', true);
    xmlhttp.send();
  };
  CHandler = function(order, count, currentSum){
    var rc, thisorder, thissum, abcde, i$, to$, i, thisbutton, message, err, xmlhttp;
    try {
      rc = document.createElement('span');
      rc.innerText = '...';
      rc.className = 'redcircle';
      rc.style.fontSize = '5px';
      this.appendChild(rc);
      thisorder = order;
      thissum = currentSum;
      abcde = $("control-ring").children;
      for (i$ = 0, to$ = abcde.length; i$ < to$; ++i$) {
        i = i$;
        if (abcde[i] !== this) {
          makeButtonDisable(abcde[i]);
        }
      }
      thisbutton = this;
      if (Math.random() > 0.8) {
        throw "你知道";
      }
      message = '你不知道';
      bubbleHandler(message, currentSum);
    } catch (e$) {
      err = e$;
      bubbleHandler(err, currentSum);
    }
    if (window.XMLHttpRequest) {
      xmlhttp = new XMLHttpRequest();
    } else {
      xmlhttp = new ActiveXObject('Microsoft.XMLHTTP');
    }
    xmlhttp.onreadystatechange = function(){
      var flag, abcde, i$, to$, i;
      if (xmlhttp.readyState === 4 && xmlhttp.status === 200) {
        rc.innerText = xmlhttp.responseText;
        thissum = thissum + parseInt(xmlhttp.responseText);
        flag = 1;
        abcde = $("control-ring").children;
        for (i$ = 0, to$ = abcde.length; i$ < to$; ++i$) {
          i = i$;
          if (abcde[i].childNodes.length === 1) {
            makeButtonEnable(abcde[i]);
            flag = 0;
          }
        }
        makeButtonDisable(thisbutton);
        if (flag === 1) {
          bubbleHandler('caculate', thissum);
        }
        count++;
        if (count !== 5 && checkMouseLeave() === 0) {
          s5Callback(thisorder, count, thissum);
        }
      }
    };
    xmlhttp.open('GET', '/', true);
    xmlhttp.send();
  };
  DHandler = function(order, count, currentSum){
    var rc, thisorder, thissum, abcde, i$, to$, i, thisbutton, message, err, xmlhttp;
    try {
      rc = document.createElement('span');
      rc.innerText = '...';
      rc.className = 'redcircle';
      rc.style.fontSize = '5px';
      this.appendChild(rc);
      thisorder = order;
      thissum = currentSum;
      abcde = $("control-ring").children;
      for (i$ = 0, to$ = abcde.length; i$ < to$; ++i$) {
        i = i$;
        if (abcde[i] !== this) {
          makeButtonDisable(abcde[i]);
        }
      }
      thisbutton = this;
      if (Math.random() > 0.8) {
        throw "他知道";
      }
      message = '他不知道';
      bubbleHandler(message, currentSum);
    } catch (e$) {
      err = e$;
      bubbleHandler(err, currentSum);
    }
    if (window.XMLHttpRequest) {
      xmlhttp = new XMLHttpRequest();
    } else {
      xmlhttp = new ActiveXObject('Microsoft.XMLHTTP');
    }
    xmlhttp.onreadystatechange = function(){
      var flag, abcde, i$, to$, i;
      if (xmlhttp.readyState === 4 && xmlhttp.status === 200) {
        rc.innerText = xmlhttp.responseText;
        thissum = thissum + parseInt(xmlhttp.responseText);
        flag = 1;
        abcde = $("control-ring").children;
        for (i$ = 0, to$ = abcde.length; i$ < to$; ++i$) {
          i = i$;
          if (abcde[i].childNodes.length === 1) {
            makeButtonEnable(abcde[i]);
            flag = 0;
          }
        }
        makeButtonDisable(thisbutton);
        if (flag === 1) {
          bubbleHandler('caculate', thissum);
        }
        count++;
        if (count !== 5 && checkMouseLeave() === 0) {
          s5Callback(thisorder, count, thissum);
        }
      }
    };
    xmlhttp.open('GET', '/', true);
    xmlhttp.send();
  };
  EHandler = function(order, count, currentSum){
    var rc, thisorder, thissum, abcde, i$, to$, i, thisbutton, message, err, xmlhttp;
    try {
      rc = document.createElement('span');
      rc.innerText = '...';
      rc.className = 'redcircle';
      rc.style.fontSize = '5px';
      this.appendChild(rc);
      thisorder = order;
      thissum = currentSum;
      abcde = $("control-ring").children;
      for (i$ = 0, to$ = abcde.length; i$ < to$; ++i$) {
        i = i$;
        if (abcde[i] !== this) {
          makeButtonDisable(abcde[i]);
        }
      }
      thisbutton = this;
      if (Math.random() > 0.8) {
        throw "才不怪";
      }
      message = '才怪';
      bubbleHandler(message, currentSum);
    } catch (e$) {
      err = e$;
      bubbleHandler(err, currentSum);
    }
    if (window.XMLHttpRequest) {
      xmlhttp = new XMLHttpRequest();
    } else {
      xmlhttp = new ActiveXObject('Microsoft.XMLHTTP');
    }
    xmlhttp.onreadystatechange = function(){
      var flag, abcde, i$, to$, i;
      if (xmlhttp.readyState === 4 && xmlhttp.status === 200) {
        rc.innerText = xmlhttp.responseText;
        thissum = thissum + parseInt(xmlhttp.responseText);
        flag = 1;
        abcde = $("control-ring").children;
        for (i$ = 0, to$ = abcde.length; i$ < to$; ++i$) {
          i = i$;
          if (abcde[i].childNodes.length === 1) {
            makeButtonEnable(abcde[i]);
            flag = 0;
          }
        }
        makeButtonDisable(thisbutton);
        if (flag === 1) {
          bubbleHandler('caculate', thissum);
        }
        count++;
        if (count !== 5 && checkMouseLeave() === 0) {
          s5Callback(thisorder, count, thissum);
        }
      }
    };
    xmlhttp.open('GET', '/', true);
    xmlhttp.send();
  };
  bubbleHandler = function(message, currentSum){
    var bubble;
    if (message === 'caculate') {
      bubble = $("info");
      bubble.style.fontSize = '16px';
      bubble.style.lineHight = '20px';
      bubble.style.overFlow = 'visible';
      bubble.innerHTML = "楼主异步调用战斗力感人,\n目测不超过 " + currentSum;
    } else {
      bubble = $("info");
      bubble.innerHTML = message;
    }
  };
  checkMouseLeave = function(){
    var area, x, y, divx1, divy1, divx2, divy2;
    area = $("button");
    x = event.clientX;
    y = event.clientY;
    divx1 = area.offsetLeft;
    divy1 = area.offsetTop;
    divx2 = area.offsetLeft + area.offsetWidth;
    divy2 = area.offsetTop + area.offsetHeight;
    if (x < divx1 || x > divx2 || y < divy1 || y > divy2) {
      return 1;
    }
    return 0;
  };
}).call(this);
