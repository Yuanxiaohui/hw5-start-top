（虽然和老师的代码有诸多的相似之处）就拿s1来说吧，我首先是我想到就是添加click监听事件（add-click-event-to-all-buttons!），然后就是通过oop编程（因为那几个小的按钮事件处理有很多的相似之处），所以就建立了button对象（class Button）将他们的相似或者相同的地方联系在一起，然后就是在button对象里面建立了constctor在里面添加了click监听事件和进行一些initial操作后，然后就是在监听事件里面添加了回调函数的处理（@fetch-number-and-show!），在回调里面就是处理了得到数字之后的一些显示的操作（@done!， @@@enable-other-buttons @， @dom.find '.unread' .text number， @success-or-fail number），写完了五个按钮后就是想到了bubble click事件的添加（add-sum-to-bubble!），这个时候才想到在回调函数里面添加一些条件判断，判断是否五个小的按钮否点击完成，激活bubble（@@@bubble-can-click-when-all-the-numbers-get! if @@@all-numbers-get!）， 添加完成后，再次对bubble进行显示处理，他的一些操作和小的按钮式差不多了，然后这个时候就又想到了mouse leave事件，应该恢复所有的按钮的初始状态当mouse leave的时候，（add-leave-event-to-the-area!），在这个过程中添加了许多的reset操作（reset，reset-for-bubble），然后就是debug了。debug完成后，我就是算是吧是完成了，做的过程中，给我的感觉就是边想边做，然后漏了什么就往回补，但是这过程中一定要semantic， 不然的话很难向前进行，做完后就debug，我想这就是top的精髓吧。
