// Generated by LiveScript 1.3.1
(function(){
  var Button, ControlRing, infoBar, atPlusButton, initAllButtons, resetAllButtonWhenMouseLeaveApb, this$ = this;
  Button = (function(){
    /*
     *	@state: 按钮的状态
     *	@buttons：按钮对象
     *  @disable：使按钮不能点击
     *	@enable ：按钮回复点击功能
     *	@reset ：重置按钮状态
     *	@visible：让数字小红圈显示
     *	@show-number ：将数字显示在小红圈中
     *	@wait：转换按钮为wating状态
     *	@done:转换按钮为done状态
     *	@get-number-and-show-it：发送请求，获得数字，并显示
     *
     */
    Button.displayName = 'Button';
    var state, button, prototype = Button.prototype, constructor = Button;
    state = void 8;
    button = void 8;
    function Button(button, successInfo, faildInfo, callback){
      var this$ = this;
      this.button = button;
      this.successInfo = successInfo;
      this.faildInfo = faildInfo;
      this.callback = callback;
      this.state = 'enabled';
      this.button.addClass('enabled');
      this.button.click(function(){
        if (this$.state === 'enabled') {
          ControlRing.disableAllOtherButtons(this$);
          this$.visible();
          this$.wait();
          this$.getNumberAndShowIt();
        }
      });
    }
    prototype.disable = function(){
      this.button.removeClass('enabled').addClass('disabled');
      this.state = 'disable';
    };
    prototype.enable = function(){
      this.button.removeClass('disabled').addClass('enabled');
      this.state = 'enabled';
    };
    prototype.reset = function(){
      this.button.removeClass('disabled done').addClass('enabled');
      this.state = 'enabled';
      this.button.find('.unread').removeClass('visible').text("");
    };
    prototype.visible = function(){
      this.button.find('.unread').addClass('visible').text('...');
    };
    prototype.showNumber = function(number){
      this.button.find('.unread').text(number);
    };
    prototype.wait = function(){
      this.button.removeClass('enabled').addClass('waiting');
      this.state = 'waiting';
    };
    prototype.done = function(){
      this.button.removeClass('waiting').addClass('done disabled');
      this.state = 'done';
    };
    prototype.getNumberAndShowIt = function(){
      var this$ = this;
      $.get('/', function(number, result){
        this$.done();
        this$.showNumber(number);
        infoBar.addNum(parseInt(number));
        if (ControlRing.ifAllButtonIsDone()) {
          infoBar.enableInfoBar();
        }
        ControlRing.enableAllOtherButtons(this$);
        this$.callback();
      });
    };
    return Button;
  }());
  ControlRing = (function(){
    /*
     *	@buttons: Control-Ring中的5个button
     *  @enable-all-other-buttons：使其他非done状态的button恢复点击
     *	@disable-all-other-buttons： 使其他按钮不能点击
     *	@if-all-button-is-done ：判断是否5个按钮都为done状态
     *	@reset-all-buttons： 重置所有按钮的状态
     *
     */
    ControlRing.displayName = 'ControlRing';
    var prototype = ControlRing.prototype, constructor = ControlRing;
    ControlRing.buttons = [];
    function ControlRing(buttons, successInfos, faildInfos, callback){
      var i$, len$;
      this.buttons = buttons;
      this.successInfos = successInfos;
      this.faildInfos = faildInfos;
      this.callback = callback;
      for (i$ = 0, len$ = buttons.length; i$ < len$; ++i$) {
        (fn$.call(this, i$, buttons[i$]));
      }
      function fn$(i, button){
        button = new Button($(button), successInfos[i], faildInfos[i], this.callback);
        this.constructor.buttons.push(button);
      }
    }
    ControlRing.enableAllOtherButtons = function(thisButton){
      var i$, ref$, len$, button, results$ = [];
      for (i$ = 0, len$ = (ref$ = this.buttons).length; i$ < len$; ++i$) {
        button = ref$[i$];
        if (button !== thisButton && button.state !== 'done') {
          results$.push(button.enable());
        }
      }
      return results$;
    };
    ControlRing.disableAllOtherButtons = function(thisButton){
      var i$, ref$, len$, button, results$ = [];
      for (i$ = 0, len$ = (ref$ = this.buttons).length; i$ < len$; ++i$) {
        button = ref$[i$];
        if (button !== thisButton && button.state !== 'done') {
          results$.push(button.disable());
        }
      }
      return results$;
    };
    ControlRing.resetAllButtons = function(){
      var i$, ref$, len$, button, results$ = [];
      for (i$ = 0, len$ = (ref$ = this.buttons).length; i$ < len$; ++i$) {
        button = ref$[i$];
        results$.push(button.reset());
      }
      return results$;
    };
    ControlRing.ifAllButtonIsDone = function(){
      var i$, ref$, len$, button;
      for (i$ = 0, len$ = (ref$ = this.buttons).length; i$ < len$; ++i$) {
        button = ref$[i$];
        if (button.state !== 'done') {
          return false;
        }
      }
      return true;
    };
    return ControlRing;
  }());
  infoBar = (function(){
    /*
     *  @bar: info-bar的对象
     * 	@sum: 记录当前所有数字之和
     *	@enable-info-bar: 激活info-bar
     *  @disable-info-bar： 灭活info-bar
     *	@reset： 重置info-bar
     *
     */
    infoBar.displayName = 'infoBar';
    var prototype = infoBar.prototype, constructor = infoBar;
    function infoBar(bar, sum){
      var this$ = this;
      this.bar = bar;
      this.sum = sum != null ? sum : 0;
      this.constructor.bar = this.bar;
      this.constructor.sum = this.sum;
      this.bar.addClass('disabled');
      this.bar.click(function(){
        if (this$.bar.hasClass('enabled')) {
          this$.bar.find('.sum').addClass('visible').text(infoBar.sum);
          this$.bar.removeClass('enabled');
          this$.bar.addClass('disabled');
        }
      });
    }
    infoBar.enableInfoBar = function(){
      return this.bar.removeClass('disabled').addClass('enabled');
    };
    infoBar.disableInfoBar = function(){
      return this.bar.removeClass('enabled').addClass('disabled');
    };
    infoBar.addNum = function(number){
      return this.sum += number;
    };
    infoBar.reset = function(){
      this.bar.removeClass('enabled').addClass('disabled');
      this.bar.find('.sum').removeClass('visible');
      return this.sum = 0;
    };
    return infoBar;
  }());
  atPlusButton = (function(){
    /*
     *  @breakOP: 当为true时中断并禁止当前所有点击操作，初始化为false
     * 	@click-next-button：点击下一个按钮
     *	@count：记录当前已经点击了多少个按钮
     *  @order : 点击按钮的次序
     *	@reset： 重置
     *
     */
    atPlusButton.displayName = 'atPlusButton';
    var prototype = atPlusButton.prototype, constructor = atPlusButton;
    atPlusButton.breakOP = false;
    function atPlusButton(apb, buttons, infoBar, order, count){
      var this$ = this;
      this.apb = apb;
      this.buttons = buttons;
      this.infoBar = infoBar;
      this.order = order;
      this.count = count != null ? count : 0;
      this.constructor.count = this.count;
      this.apb.click(function(){
        this$.clickNextButton();
      });
    }
    prototype.clickNextButton = function(){
      var index;
      console.log(this.count);
      if (this.count < 5 && this.breakOP === false) {
        index = this.order[this.count++].charCodeAt() - 'A'.charCodeAt();
        this.buttons[index].click();
      } else {
        this.infoBar.click();
      }
    };
    prototype.reset = function(){
      this.count = 0;
    };
    return atPlusButton;
  }());
  initAllButtons = function(){
    var successInfos, faildInfos, bar, controlRing;
    successInfos = ['这是个天大的秘密', '我不知道', '你不知道', '他不知道', '才怪'];
    faildInfos = ['这不是个天大的秘密', '我知道', '你知道', '他知道', '才怪'];
    bar = new infoBar($('#info-bar'));
    this$.apc = $('#at-plus-container');
    this$.robot = new atPlusButton($('.apb'), $('#control-ring .button'), $('#info-bar'), ["A", "B", "C", "D", "E"]);
    return controlRing = new ControlRing($('#control-ring .button'), successInfos, faildInfos, function(){
      robot.clickNextButton();
    });
  };
  resetAllButtonWhenMouseLeaveApb = function(){
    this$.apc.on('mouseleave', function(event){
      this$.robot.breakOP = true;
      infoBar.reset();
      ControlRing.resetAllButtons();
      this$.robot.reset();
    });
    return this$.apc.on('mouseenter', function(event){
      setTimeout(function(){
        this.robot.breakOP = false;
        infoBar.reset();
        ControlRing.resetAllButtons();
        this.robot.reset();
      }, 1000);
    });
  };
  $(function(){
    initAllButtons();
    return resetAllButtonWhenMouseLeaveApb();
  });
}).call(this);
