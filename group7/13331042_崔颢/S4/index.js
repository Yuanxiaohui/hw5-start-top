// Generated by LiveScript 1.3.1
(function(){
  var Handler, Bubble, Reset, Robot, initBigBubble, initAllSmallCirlces, initResetButton, initRobot;
  Handler = (function(){
    Handler.displayName = 'Handler';
    var prototype = Handler.prototype, constructor = Handler;
    Handler.allCircles = [];
    Handler.callBack = function(){
      return null;
    };
    Handler.setCallBack = function(temCallBack){
      this.callBack = temCallBack;
    };
    Handler.disableOtherCircles = function(nowCircle){
      var i$, ref$, len$, circle;
      for (i$ = 0, len$ = (ref$ = this.allCircles).length; i$ < len$; ++i$) {
        circle = ref$[i$];
        if (circle !== nowCircle && circle.status !== 'finished') {
          circle.status = 'unclickable';
          circle.theCircle.removeClass('clickable');
        }
      }
    };
    Handler.enableOtherCircles = function(nowCircle){
      var i$, ref$, len$, circle;
      for (i$ = 0, len$ = (ref$ = this.allCircles).length; i$ < len$; ++i$) {
        circle = ref$[i$];
        if (circle !== nowCircle && circle.status !== 'finished') {
          circle.theCircle.addClass('clickable');
          circle.status = 'clickable';
        }
      }
    };
    Handler.checkIfAllFinished = function(){
      var i$, ref$, len$, circle;
      for (i$ = 0, len$ = (ref$ = this.allCircles).length; i$ < len$; ++i$) {
        circle = ref$[i$];
        if (circle.status !== 'finished') {
          return false;
        }
      }
      return true;
    };
    function Handler(theCircle, bubble){
      var this$ = this;
      this.theCircle = theCircle;
      this.bubble = bubble;
      this.status = "clickable";
      this.theCircle.addClass('clickable');
      this.constructor.allCircles.push(this);
      this.theCircle.click(function(){
        if (this$.status === 'clickable') {
          this$.constructor.disableOtherCircles(this$);
          this$.status = 'acquiring';
          this$.theCircle.append('<span class="unread" style="font-size:5px">..</span>');
          this$.getNumber();
        }
      });
    }
    prototype.getNumber = function(){
      var this$ = this;
      $.get('/', function(num, state){
        if (this$.status === 'acquiring') {
          this$.theCircle.find('.unread').text(num);
          this$.status = 'finished';
          this$.theCircle.removeClass('clickable');
          this$.constructor.enableOtherCircles(this$);
          if (this$.constructor.checkIfAllFinished()) {
            this$.bubble.setClickable();
          }
          this$.constructor.callBack();
        }
      });
    };
    prototype.reset = function(){
      var init;
      this.status = 'clickable';
      this.theCircle.addClass('clickable');
      init = this.theCircle.text()[0];
      this.theCircle.text(init);
    };
    return Handler;
  }());
  Bubble = (function(){
    Bubble.displayName = 'Bubble';
    var prototype = Bubble.prototype, constructor = Bubble;
    function Bubble(theBubble){
      var this$ = this;
      this.theBubble = theBubble;
      this.status = 'unclickable';
      this.theBubble.removeClass('clickable');
      this.theBubble.click(function(){
        if (this$.status === 'clickable') {
          this$.sumAllAndShow();
        }
      });
    }
    prototype.setClickable = function(){
      this.status = 'clickable';
      this.theBubble.addClass('clickable');
    };
    prototype.sumAllAndShow = function(){
      var sum, i$, ref$, len$, circle, tem;
      sum = 0;
      for (i$ = 0, len$ = (ref$ = Handler.allCircles).length; i$ < len$; ++i$) {
        circle = ref$[i$];
        tem = circle.theCircle.find('.unread').text();
        sum += parseInt(tem);
      }
      this.theBubble.html(this.theBubble.text() + '</br>' + sum);
      this.status = 'unclickable';
      this.theBubble.removeClass('clickable');
    };
    prototype.reset = function(){
      this.status = 'unclickable';
      this.theBubble.removeClass('clickable');
      this.theBubble.text('');
    };
    return Bubble;
  }());
  Reset = (function(){
    Reset.displayName = 'Reset';
    var prototype = Reset.prototype, constructor = Reset;
    function Reset(theReset, bubble){
      var this$ = this;
      this.theReset = theReset;
      this.bubble = bubble;
      this.theReset.mouseleave(function(){
        var i$, ref$, len$, circle;
        for (i$ = 0, len$ = (ref$ = Handler.allCircles).length; i$ < len$; ++i$) {
          circle = ref$[i$];
          circle.reset();
        }
        this$.bubble.reset();
        Robot.reset();
        Handler.callBack = function(){
          return null;
        };
      });
    }
    return Reset;
  }());
  Robot = (function(){
    Robot.displayName = 'Robot';
    var prototype = Robot.prototype, constructor = Robot;
    Robot.nowNum = -1;
    Robot.isWorking = false;
    Robot.seq = ["A", "B", "C", "D", "E"];
    Robot.getSequence = function(){
      this.seq.sort(function(){
        return 0.5 - Math.random();
      });
    };
    Robot.reset = function(){
      this.nowNum = 0;
      return this.isWorking = false;
    };
    Robot.getNext = function(){
      var i$, ref$, len$, now;
      for (i$ = 0, len$ = (ref$ = this.seq).length; i$ < len$; ++i$) {
        now = ref$[i$];
        if (Handler.allCircles[now.charCodeAt() - 'A'.charCodeAt()].status === 'finished') {
          continue;
        } else {
          break;
        }
      }
      this.nowNum = now.charCodeAt() - 'A'.charCodeAt();
    };
    prototype.start = function(){
      var callBack;
      if (this.constructor.isWorking) {
        if (Handler.checkIfAllFinished() === false) {
          this.constructor.getSequence();
          $('#info-bar').text(this.constructor.seq.join('、'));
          callBack = function(){
            if (Handler.checkIfAllFinished()) {
              Robot.bubble.click();
              Robot.isWorking = false;
            } else {
              Robot.getNext();
              Robot.circles[Robot.nowNum].click();
            }
          };
          Handler.setCallBack(callBack);
          this.constructor.getNext();
          this.constructor.circles[this.constructor.nowNum].click();
        }
      }
    };
    function Robot(){}
    return Robot;
  }());
  initBigBubble = function(){
    var bubble, bubbleHandler;
    bubble = $('#info-bar');
    bubbleHandler = new Bubble($(bubble));
    return bubbleHandler;
  };
  initAllSmallCirlces = function(bubble){
    var circles, i$, len$;
    circles = $('#control-ring .button');
    for (i$ = 0, len$ = circles.length; i$ < len$; ++i$) {
      (fn$.call(this, circles[i$]));
    }
    function fn$(circle){
      var nowCircle;
      nowCircle = new Handler($(circle), bubble);
    }
  };
  initResetButton = function(bubble){
    var reset, resetHandler;
    reset = $('#bottom-positioner');
    resetHandler = new Reset($(reset), bubble);
  };
  initRobot = function(bubble){
    var robot;
    Robot.circles = $('#control-ring .button');
    Robot.bubble = $('#info-bar');
    robot = new Robot(bubble);
    return robot;
  };
  $(function(){
    var bubble, robot;
    bubble = initBigBubble();
    initAllSmallCirlces(bubble);
    initResetButton(bubble);
    robot = initRobot(bubble);
    return $('#button .apb').click(function(){
      if (Robot.isWorking === false) {
        Robot.isWorking = true;
        robot.start();
      }
    });
  });
}).call(this);
