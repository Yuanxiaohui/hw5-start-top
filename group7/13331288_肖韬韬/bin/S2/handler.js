// Generated by LiveScript 1.3.1
(function(){
  var Button, calculator, addClickingEventsToAllButtons, addClickingEventsToBubble, addResettingEventsWhenLeave, robot, s2Robot;
  Button = (function(){
    Button.displayName = 'Button';
    var prototype = Button.prototype, constructor = Button;
    Button.buttons = new Array;
    function Button(dom, resultReceivedCallback){
      var this$ = this;
      this.dom = dom;
      this.resultReceivedCallback = resultReceivedCallback;
      this.state = 'enabled';
      this.dom.click(function(){
        if (this$.state === 'enabled') {
          this$.constructor.disabledOtherButtons(this$);
          this$.waitingResult();
          this$.showResultAndMakeOtherButtonsActive();
        }
      });
      this.constructor.buttons.push(this);
    }
    Button.disabledOtherButtons = function(thisButton){
      var i$, ref$, len$, button;
      for (i$ = 0, len$ = (ref$ = this.buttons).length; i$ < len$; ++i$) {
        button = ref$[i$];
        if (button !== thisButton && button.state !== 'done') {
          button.disabled();
        }
      }
    };
    Button.enabledOtherButton = function(thisButton){
      var i$, ref$, len$, button;
      for (i$ = 0, len$ = (ref$ = this.buttons).length; i$ < len$; ++i$) {
        button = ref$[i$];
        if (button !== thisButton && button.state !== 'done') {
          button.enabled();
        }
      }
    };
    Button.allButtonStatusIsDone = function(){
      var i$, ref$, len$, button;
      for (i$ = 0, len$ = (ref$ = this.buttons).length; i$ < len$; ++i$) {
        button = ref$[i$];
        if (button.state !== 'done') {
          return false;
        }
      }
      return true;
    };
    Button.allButtonReset = function(){
      var i$, ref$, len$, button;
      for (i$ = 0, len$ = (ref$ = this.buttons).length; i$ < len$; ++i$) {
        button = ref$[i$];
        button.reset();
      }
    };
    prototype.showResultAndMakeOtherButtonsActive = function(){
      var this$ = this;
      $.get('/key=' + this.dom.id, function(number, result){
        this$.done();
        this$.constructor.enabledOtherButton(this$);
        this$.showNumber(number);
        calculator.addToSum(number);
        if (this$.constructor.allButtonStatusIsDone()) {
          this$.allButtonReadyCallback();
        }
        robot.clickNext();
      });
    };
    prototype.allButtonReadyCallback = function(){
      $('#info-bar').addClass('active');
    };
    prototype.showNumber = function(number){
      this.dom.find('span').text(number);
    };
    prototype.disabled = function(){
      this.state = 'disabled';
      this.dom.addClass('disabled');
    };
    prototype.enabled = function(){
      this.state = 'enabled';
      this.dom.removeClass('disabled');
    };
    prototype.waitingResult = function(){
      this.state = 'waiting';
      this.dom.find('span').addClass('unread');
      this.dom.find('span').text('···');
      this.dom.addClass('disabled');
    };
    prototype.done = function(){
      this.state = 'done';
    };
    prototype.reset = function(){
      this.state = 'disabled';
      this.dom.removeClass('disabled');
      this.dom.find('span').text('');
      this.dom.find('span').removeClass('unread');
    };
    return Button;
  }());
  calculator = {
    sum: 0,
    addToSum: function(number){
      this.sum += parseInt(number);
    },
    reset: function(){
      this.sum = 0;
    }
  };
  $(function(){
    robot.initial();
    addClickingEventsToAllButtons(function(){
      robot.clickNext();
    });
    addClickingEventsToBubble();
    addResettingEventsWhenLeave();
    s2Robot();
  });
  addClickingEventsToAllButtons = function(next){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = $('#control-ring .button')).length; i$ < len$; ++i$) {
      results$.push((fn$.call(this, ref$[i$])));
    }
    return results$;
    function fn$(dom){
      var button;
      return button = new Button($(dom), function(number){});
    }
  };
  addClickingEventsToBubble = function(){
    var bubble;
    bubble = $('#info-bar');
    bubble.click(function(){
      if (bubble.hasClass('active')) {
        bubble.text(calculator.sum);
      }
    });
  };
  addResettingEventsWhenLeave = function(){
    $('#bottom-positioner').mouseleave(function(event){
      var bubble;
      calculator.reset();
      Button.allButtonReset();
      bubble = $('#info-bar');
      if (bubble.hasClass('active')) {
        bubble.removeClass('active');
      }
    });
  };
  robot = {
    initial: function(){
      this.buttons = $('#control-ring .button');
      this.bubble = $('#info-bar');
      this.sequence = ["A", "B", "C", "D", "E"];
      this.cursor = 1;
    },
    clickNext: function(){
      if (this.cursor === this.sequence.length) {
        this.bubble.click();
      } else {
        this.getNextButton().click();
      }
    },
    getNextButton: function(){
      var index;
      index = this.sequence[this.cursor++].charCodeAt() - 'A'.charCodeAt();
      return this.buttons[index];
    }
  };
  s2Robot = function(){
    $('#at-plus-container').click(function(){
      robot.buttons[0].click();
    });
  };
}).call(this);
